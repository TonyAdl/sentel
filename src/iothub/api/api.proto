// Interface exported by the server
syntax = "proto3";
package api;

service Api {
    rpc Version(VersionRequest) returns (VersionReply){}
    rpc Admins(AdminsRequest) returns (AdminsReply){}
    rpc Cluster(ClusterRequest) returns (ClusterReply){}
    rpc Routes(RoutesRequest) returns (RoutesReply){}
    rpc Status(StatusRequest) returns (StatusReply){}
    rpc Broker(BrokerRequest) returns (BrokerReply){}
    rpc Plugins(PluginsRequest) returns (PluginsReply){}
    rpc Services(ServicesRequest) returns (ServicesReply){}
    rpc Subscriptions(SubscriptionsRequest) returns (SubscriptionsReply){}
    rpc Clients(ClientsRequest) returns (ClientsReply) {}
    rpc Sessions(SessionsRequest) returns (SessionsReply){}
    rpc Topics(TopicsRequest) returns (TopicsReply){}
}

// Version
message VersionRequest { }
message VersionReply{
    string Version  = 1;
}
// Broker
message BrokerRequest{
    string Category = 1;
}
message BrokerReply{
    ReplyMessageHeader Header = 1;
    map<string, uint64> Stats = 2; 
    map<string, uint64> Metrics = 3;
}
// Clients
message ClientsRequest{
    string Category = 1;
    string ClientId = 2;
}
message ClientsReply{
    ReplyMessageHeader Header = 1;
    repeated ClientInfo Clients =2;
}

message ClientInfo {
    string UserName = 1;
    bool CleanSession = 2;
    string PeerName = 3;
    string ConnectTime = 4;
}



message AdminsRequest{}
message AdminsReply{}
message ClusterRequest{}
message ClusterReply{}
message RoutesRequest{}
message RoutesReply{}
message StatusRequest{}
message StatusReply{}
message PluginsRequest{}
message PluginsReply{}
message ServicesRequest{}
message ServicesReply{}
message SubscriptionsRequest{}
message SubscriptionsReply{}

// Session
message SessionsRequest{
    string Category = 1;
    string ClientId = 2;
    map<string, bool> Conditions  = 3;
}
message SessionsReply{
    ReplyMessageHeader Header = 1;
    repeated SessionInfo  Sessions = 2;
}

message SessionInfo {
    string ClientId           = 1;
	bool CleanSession       = 2;
	uint64 MessageMaxInflight = 3; 
	uint64 MessageInflight    = 4; 
	uint64 MessageInQueue     = 5; 
	uint64 MessageDropped     = 6; 
	uint64 AwaitingRel        = 7;
	uint64 AwaitingComp       = 8; 
	uint64 AwaitingAck        = 9; 
	string CreatedAt          = 10; 
}

// Topic
message TopicsRequest{}
message TopicsReply{}

// Message Header
message ReplyMessageHeader {
    bool Success = 1;
    string Reason = 2;
}
