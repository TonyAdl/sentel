// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	registry.proto

It has these top-level messages:
	DeviceAddRequest
	DeviceAddResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceAddRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeviceAddRequest) Reset()                    { *m = DeviceAddRequest{} }
func (m *DeviceAddRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceAddRequest) ProtoMessage()               {}
func (*DeviceAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceAddRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeviceAddResponse struct {
	Reply string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *DeviceAddResponse) Reset()                    { *m = DeviceAddResponse{} }
func (m *DeviceAddResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceAddResponse) ProtoMessage()               {}
func (*DeviceAddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeviceAddResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceAddRequest)(nil), "protocol.DeviceAddRequest")
	proto.RegisterType((*DeviceAddResponse)(nil), "protocol.DeviceAddResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	// Add a device to registry
	AddDevice(ctx context.Context, in *DeviceAddRequest, opts ...grpc.CallOption) (*DeviceAddResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) AddDevice(ctx context.Context, in *DeviceAddRequest, opts ...grpc.CallOption) (*DeviceAddResponse, error) {
	out := new(DeviceAddResponse)
	err := grpc.Invoke(ctx, "/protocol.Registry/AddDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	// Add a device to registry
	AddDevice(context.Context, *DeviceAddRequest) (*DeviceAddResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Registry/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AddDevice(ctx, req.(*DeviceAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _Registry_AddDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x4d, 0xcf,
	0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9,
	0x39, 0x4a, 0x6a, 0x5c, 0x02, 0x2e, 0xa9, 0x65, 0x99, 0xc9, 0xa9, 0x8e, 0x29, 0x29, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x26, 0x97, 0x20, 0x92, 0xba, 0xe2, 0x82, 0xfc, 0xbc,
	0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xa2, 0xd4, 0x82, 0x9c, 0x4a, 0xa8, 0x4a, 0x08, 0xc7, 0x28,
	0x88, 0x8b, 0x23, 0x08, 0x6a, 0x9d, 0x90, 0x1b, 0x17, 0xa7, 0x63, 0x4a, 0x0a, 0x44, 0xa7, 0x90,
	0x94, 0x1e, 0xcc, 0x5a, 0x3d, 0x74, 0x3b, 0xa5, 0xa4, 0xb1, 0xca, 0x41, 0xec, 0x51, 0x62, 0x48,
	0x62, 0x03, 0xcb, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x61, 0x81, 0x3a, 0x6d, 0xc9, 0x00,
	0x00, 0x00,
}
