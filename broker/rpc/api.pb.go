// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionReply
	ClientsRequest
	ClientsReply
	Client
	StatusRequest
	StatusReply
	ServicesRequest
	ServicesReply
	Service
	SubscriptionsRequest
	SubscriptionsReply
	Subscription
	SessionsRequest
	SessionsReply
	Session
	TopicsRequest
	TopicsReply
	Topic
	ReplyMessageHeader
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Version
type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionReply struct {
	Version string `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *VersionReply) Reset()                    { *m = VersionReply{} }
func (m *VersionReply) String() string            { return proto.CompactTextString(m) }
func (*VersionReply) ProtoMessage()               {}
func (*VersionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Clients
type ClientsRequest struct {
	Category string `protobuf:"bytes,1,opt,name=Category" json:"Category,omitempty"`
	Service  string `protobuf:"bytes,2,opt,name=Service" json:"Service,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=ClientId" json:"ClientId,omitempty"`
}

func (m *ClientsRequest) Reset()                    { *m = ClientsRequest{} }
func (m *ClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientsRequest) ProtoMessage()               {}
func (*ClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ClientsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ClientsRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ClientsReply struct {
	Header  *ReplyMessageHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Clients []*Client           `protobuf:"bytes,2,rep,name=Clients" json:"Clients,omitempty"`
}

func (m *ClientsReply) Reset()                    { *m = ClientsReply{} }
func (m *ClientsReply) String() string            { return proto.CompactTextString(m) }
func (*ClientsReply) ProtoMessage()               {}
func (*ClientsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClientsReply) GetHeader() *ReplyMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientsReply) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type Client struct {
	UserName     string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	CleanSession bool   `protobuf:"varint,2,opt,name=CleanSession" json:"CleanSession,omitempty"`
	PeerName     string `protobuf:"bytes,3,opt,name=PeerName" json:"PeerName,omitempty"`
	ConnectTime  string `protobuf:"bytes,4,opt,name=ConnectTime" json:"ConnectTime,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Client) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Client) GetCleanSession() bool {
	if m != nil {
		return m.CleanSession
	}
	return false
}

func (m *Client) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *Client) GetConnectTime() string {
	if m != nil {
		return m.ConnectTime
	}
	return ""
}

// Status
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StatusReply struct {
	Header *ReplyMessageHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StatusReply) GetHeader() *ReplyMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// Service
type ServicesRequest struct {
	Category    string `protobuf:"bytes,1,opt,name=Category" json:"Category,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Listen      string `protobuf:"bytes,3,opt,name=Listen" json:"Listen,omitempty"`
}

func (m *ServicesRequest) Reset()                    { *m = ServicesRequest{} }
func (m *ServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ServicesRequest) ProtoMessage()               {}
func (*ServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ServicesRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ServicesRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServicesRequest) GetListen() string {
	if m != nil {
		return m.Listen
	}
	return ""
}

type ServicesReply struct {
	Header   *ReplyMessageHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Services []*Service          `protobuf:"bytes,2,rep,name=Services" json:"Services,omitempty"`
}

func (m *ServicesReply) Reset()                    { *m = ServicesReply{} }
func (m *ServicesReply) String() string            { return proto.CompactTextString(m) }
func (*ServicesReply) ProtoMessage()               {}
func (*ServicesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ServicesReply) GetHeader() *ReplyMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ServicesReply) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Service struct {
	ServiceName    string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Listen         string `protobuf:"bytes,2,opt,name=Listen" json:"Listen,omitempty"`
	Acceptors      uint64 `protobuf:"varint,3,opt,name=Acceptors" json:"Acceptors,omitempty"`
	MaxClients     uint64 `protobuf:"varint,4,opt,name=MaxClients" json:"MaxClients,omitempty"`
	CurrentClients uint64 `protobuf:"varint,5,opt,name=CurrentClients" json:"CurrentClients,omitempty"`
	ShutdownCount  uint64 `protobuf:"varint,6,opt,name=ShutdownCount" json:"ShutdownCount,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Service) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Service) GetListen() string {
	if m != nil {
		return m.Listen
	}
	return ""
}

func (m *Service) GetAcceptors() uint64 {
	if m != nil {
		return m.Acceptors
	}
	return 0
}

func (m *Service) GetMaxClients() uint64 {
	if m != nil {
		return m.MaxClients
	}
	return 0
}

func (m *Service) GetCurrentClients() uint64 {
	if m != nil {
		return m.CurrentClients
	}
	return 0
}

func (m *Service) GetShutdownCount() uint64 {
	if m != nil {
		return m.ShutdownCount
	}
	return 0
}

// Subscription
type SubscriptionsRequest struct {
	Service  string `protobuf:"bytes,1,opt,name=Service" json:"Service,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=Category" json:"Category,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=ClientId" json:"ClientId,omitempty"`
	Topic    string `protobuf:"bytes,4,opt,name=Topic" json:"Topic,omitempty"`
}

func (m *SubscriptionsRequest) Reset()                    { *m = SubscriptionsRequest{} }
func (m *SubscriptionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionsRequest) ProtoMessage()               {}
func (*SubscriptionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SubscriptionsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *SubscriptionsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *SubscriptionsRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SubscriptionsRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type SubscriptionsReply struct {
	Header        *ReplyMessageHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Subscriptions []*Subscription     `protobuf:"bytes,2,rep,name=Subscriptions" json:"Subscriptions,omitempty"`
}

func (m *SubscriptionsReply) Reset()                    { *m = SubscriptionsReply{} }
func (m *SubscriptionsReply) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionsReply) ProtoMessage()               {}
func (*SubscriptionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SubscriptionsReply) GetHeader() *ReplyMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SubscriptionsReply) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type Subscription struct {
	ClientId  string `protobuf:"bytes,1,opt,name=ClientId" json:"ClientId,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=Topic" json:"Topic,omitempty"`
	Attribute string `protobuf:"bytes,3,opt,name=Attribute" json:"Attribute,omitempty"`
	Qos       int32  `protobuf:"varint,5,opt,name=Qos" json:"Qos,omitempty"`
	Retain    bool   `protobuf:"varint,6,opt,name=Retain" json:"Retain,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Subscription) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscription) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *Subscription) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *Subscription) GetRetain() bool {
	if m != nil {
		return m.Retain
	}
	return false
}

// Session
type SessionsRequest struct {
	Category   string          `protobuf:"bytes,1,opt,name=Category" json:"Category,omitempty"`
	Service    string          `protobuf:"bytes,2,opt,name=Service" json:"Service,omitempty"`
	ClientId   string          `protobuf:"bytes,3,opt,name=ClientId" json:"ClientId,omitempty"`
	Conditions map[string]bool `protobuf:"bytes,4,rep,name=Conditions" json:"Conditions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *SessionsRequest) Reset()                    { *m = SessionsRequest{} }
func (m *SessionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionsRequest) ProtoMessage()               {}
func (*SessionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SessionsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *SessionsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *SessionsRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SessionsRequest) GetConditions() map[string]bool {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type SessionsReply struct {
	Header   *ReplyMessageHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Sessions []*Session          `protobuf:"bytes,2,rep,name=Sessions" json:"Sessions,omitempty"`
}

func (m *SessionsReply) Reset()                    { *m = SessionsReply{} }
func (m *SessionsReply) String() string            { return proto.CompactTextString(m) }
func (*SessionsReply) ProtoMessage()               {}
func (*SessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SessionsReply) GetHeader() *ReplyMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SessionsReply) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type Session struct {
	ClientId           string `protobuf:"bytes,1,opt,name=ClientId" json:"ClientId,omitempty"`
	CleanSession       bool   `protobuf:"varint,2,opt,name=CleanSession" json:"CleanSession,omitempty"`
	MessageMaxInflight uint64 `protobuf:"varint,3,opt,name=MessageMaxInflight" json:"MessageMaxInflight,omitempty"`
	MessageInflight    uint64 `protobuf:"varint,4,opt,name=MessageInflight" json:"MessageInflight,omitempty"`
	MessageInQueue     uint64 `protobuf:"varint,5,opt,name=MessageInQueue" json:"MessageInQueue,omitempty"`
	MessageDropped     uint64 `protobuf:"varint,6,opt,name=MessageDropped" json:"MessageDropped,omitempty"`
	AwaitingRel        uint64 `protobuf:"varint,7,opt,name=AwaitingRel" json:"AwaitingRel,omitempty"`
	AwaitingComp       uint64 `protobuf:"varint,8,opt,name=AwaitingComp" json:"AwaitingComp,omitempty"`
	AwaitingAck        uint64 `protobuf:"varint,9,opt,name=AwaitingAck" json:"AwaitingAck,omitempty"`
	CreatedAt          string `protobuf:"bytes,10,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Session) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Session) GetCleanSession() bool {
	if m != nil {
		return m.CleanSession
	}
	return false
}

func (m *Session) GetMessageMaxInflight() uint64 {
	if m != nil {
		return m.MessageMaxInflight
	}
	return 0
}

func (m *Session) GetMessageInflight() uint64 {
	if m != nil {
		return m.MessageInflight
	}
	return 0
}

func (m *Session) GetMessageInQueue() uint64 {
	if m != nil {
		return m.MessageInQueue
	}
	return 0
}

func (m *Session) GetMessageDropped() uint64 {
	if m != nil {
		return m.MessageDropped
	}
	return 0
}

func (m *Session) GetAwaitingRel() uint64 {
	if m != nil {
		return m.AwaitingRel
	}
	return 0
}

func (m *Session) GetAwaitingComp() uint64 {
	if m != nil {
		return m.AwaitingComp
	}
	return 0
}

func (m *Session) GetAwaitingAck() uint64 {
	if m != nil {
		return m.AwaitingAck
	}
	return 0
}

func (m *Session) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

// Topic
type TopicsRequest struct {
	Service  string `protobuf:"bytes,1,opt,name=Service" json:"Service,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=Category" json:"Category,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=ClientId" json:"ClientId,omitempty"`
}

func (m *TopicsRequest) Reset()                    { *m = TopicsRequest{} }
func (m *TopicsRequest) String() string            { return proto.CompactTextString(m) }
func (*TopicsRequest) ProtoMessage()               {}
func (*TopicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TopicsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TopicsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *TopicsRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type TopicsReply struct {
	Header *ReplyMessageHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Topics []*Topic            `protobuf:"bytes,2,rep,name=Topics" json:"Topics,omitempty"`
}

func (m *TopicsReply) Reset()                    { *m = TopicsReply{} }
func (m *TopicsReply) String() string            { return proto.CompactTextString(m) }
func (*TopicsReply) ProtoMessage()               {}
func (*TopicsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TopicsReply) GetHeader() *ReplyMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TopicsReply) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type Topic struct {
	Topic     string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Attribute string `protobuf:"bytes,2,opt,name=Attribute" json:"Attribute,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Topic) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Topic) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

// Message Header
type ReplyMessageHeader struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty"`
}

func (m *ReplyMessageHeader) Reset()                    { *m = ReplyMessageHeader{} }
func (m *ReplyMessageHeader) String() string            { return proto.CompactTextString(m) }
func (*ReplyMessageHeader) ProtoMessage()               {}
func (*ReplyMessageHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReplyMessageHeader) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReplyMessageHeader) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "rpc.VersionRequest")
	proto.RegisterType((*VersionReply)(nil), "rpc.VersionReply")
	proto.RegisterType((*ClientsRequest)(nil), "rpc.ClientsRequest")
	proto.RegisterType((*ClientsReply)(nil), "rpc.ClientsReply")
	proto.RegisterType((*Client)(nil), "rpc.Client")
	proto.RegisterType((*StatusRequest)(nil), "rpc.StatusRequest")
	proto.RegisterType((*StatusReply)(nil), "rpc.StatusReply")
	proto.RegisterType((*ServicesRequest)(nil), "rpc.ServicesRequest")
	proto.RegisterType((*ServicesReply)(nil), "rpc.ServicesReply")
	proto.RegisterType((*Service)(nil), "rpc.Service")
	proto.RegisterType((*SubscriptionsRequest)(nil), "rpc.SubscriptionsRequest")
	proto.RegisterType((*SubscriptionsReply)(nil), "rpc.SubscriptionsReply")
	proto.RegisterType((*Subscription)(nil), "rpc.Subscription")
	proto.RegisterType((*SessionsRequest)(nil), "rpc.SessionsRequest")
	proto.RegisterType((*SessionsReply)(nil), "rpc.SessionsReply")
	proto.RegisterType((*Session)(nil), "rpc.Session")
	proto.RegisterType((*TopicsRequest)(nil), "rpc.TopicsRequest")
	proto.RegisterType((*TopicsReply)(nil), "rpc.TopicsReply")
	proto.RegisterType((*Topic)(nil), "rpc.Topic")
	proto.RegisterType((*ReplyMessageHeader)(nil), "rpc.ReplyMessageHeader")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Api service

type ApiClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	Services(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ServicesReply, error)
	Subscriptions(ctx context.Context, in *SubscriptionsRequest, opts ...grpc.CallOption) (*SubscriptionsReply, error)
	Clients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsReply, error)
	Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsReply, error)
	Topics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsReply, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error) {
	out := new(VersionReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Services(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ServicesReply, error) {
	out := new(ServicesReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Services", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Subscriptions(ctx context.Context, in *SubscriptionsRequest, opts ...grpc.CallOption) (*SubscriptionsReply, error) {
	out := new(SubscriptionsReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Subscriptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Clients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsReply, error) {
	out := new(ClientsReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Clients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsReply, error) {
	out := new(SessionsReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Sessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Topics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsReply, error) {
	out := new(TopicsReply)
	err := grpc.Invoke(ctx, "/rpc.Api/Topics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	Version(context.Context, *VersionRequest) (*VersionReply, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	Services(context.Context, *ServicesRequest) (*ServicesReply, error)
	Subscriptions(context.Context, *SubscriptionsRequest) (*SubscriptionsReply, error)
	Clients(context.Context, *ClientsRequest) (*ClientsReply, error)
	Sessions(context.Context, *SessionsRequest) (*SessionsReply, error)
	Topics(context.Context, *TopicsRequest) (*TopicsReply, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Services_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Services(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Services",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Services(ctx, req.(*ServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Subscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Subscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Subscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Subscriptions(ctx, req.(*SubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Clients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Clients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Clients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Clients(ctx, req.(*ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Sessions(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Topics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Topics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Api/Topics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Topics(ctx, req.(*TopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Api_Version_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Api_Status_Handler,
		},
		{
			MethodName: "Services",
			Handler:    _Api_Services_Handler,
		},
		{
			MethodName: "Subscriptions",
			Handler:    _Api_Subscriptions_Handler,
		},
		{
			MethodName: "Clients",
			Handler:    _Api_Clients_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Api_Sessions_Handler,
		},
		{
			MethodName: "Topics",
			Handler:    _Api_Topics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1c, 0x35,
	0x14, 0xef, 0xcc, 0x26, 0x9b, 0xcd, 0xdb, 0x6c, 0x92, 0x9a, 0x88, 0x0e, 0x11, 0x42, 0x91, 0x55,
	0xd0, 0x9e, 0x16, 0x94, 0x48, 0x80, 0x40, 0x20, 0xad, 0xa6, 0x45, 0x54, 0x22, 0x88, 0x7a, 0x0b,
	0xf7, 0xd9, 0x59, 0x77, 0x6b, 0xb2, 0x99, 0x19, 0x3c, 0x9e, 0xb6, 0x7b, 0xe9, 0x11, 0x21, 0xbe,
	0x1c, 0x5f, 0x83, 0xaf, 0xc0, 0x0d, 0xd9, 0x7e, 0xf6, 0x7a, 0x26, 0x4d, 0x55, 0xad, 0x94, 0x9b,
	0xdf, 0xef, 0xfd, 0xf1, 0xfb, 0x6f, 0xc3, 0x7e, 0x56, 0x89, 0x49, 0x25, 0x4b, 0x55, 0x92, 0x9e,
	0xac, 0x72, 0x7a, 0x0c, 0x87, 0xbf, 0x71, 0x59, 0x8b, 0xb2, 0x60, 0xfc, 0x8f, 0x86, 0xd7, 0x8a,
	0x8e, 0xe1, 0xc0, 0x23, 0xd5, 0x6a, 0x4d, 0x12, 0xd8, 0x43, 0x3a, 0x89, 0xce, 0xa2, 0xf1, 0x3e,
	0x73, 0x24, 0x9d, 0xc3, 0x61, 0xba, 0x12, 0xbc, 0x50, 0x35, 0xea, 0x92, 0x53, 0x18, 0xa4, 0x99,
	0xe2, 0xcb, 0x52, 0xae, 0x51, 0xd8, 0xd3, 0xda, 0xce, 0x8c, 0xcb, 0x97, 0x22, 0xe7, 0x49, 0x6c,
	0xed, 0x20, 0x69, 0xb4, 0x8c, 0x9d, 0x27, 0x8b, 0xa4, 0x87, 0x5a, 0x48, 0xd3, 0xe7, 0x70, 0xe0,
	0xef, 0xd0, 0xde, 0x7c, 0x0e, 0xfd, 0x1f, 0x79, 0xb6, 0xe0, 0xd2, 0xd8, 0x1f, 0x9e, 0x3f, 0x98,
	0xc8, 0x2a, 0x9f, 0x18, 0xde, 0x25, 0xaf, 0xeb, 0x6c, 0xc9, 0x2d, 0x9b, 0xa1, 0x18, 0xf9, 0x14,
	0xf6, 0xd0, 0x40, 0x12, 0x9f, 0xf5, 0xc6, 0xc3, 0xf3, 0xa1, 0xd1, 0xb0, 0x18, 0x73, 0x3c, 0xfa,
	0x67, 0x04, 0x7d, 0x7b, 0xd6, 0xee, 0xfc, 0x5a, 0x73, 0xf9, 0x73, 0x76, 0xcd, 0x5d, 0x10, 0x8e,
	0x26, 0x54, 0xbb, 0xc3, 0xb3, 0x62, 0xc6, 0x6b, 0x93, 0x11, 0x1d, 0xc9, 0x80, 0xb5, 0x30, 0xad,
	0xff, 0x0b, 0x47, 0x7d, 0x0c, 0xc7, 0xd1, 0xe4, 0x0c, 0x86, 0x69, 0x59, 0x14, 0x3c, 0x57, 0xcf,
	0xc4, 0x35, 0x4f, 0x76, 0x0c, 0x3b, 0x84, 0xe8, 0x11, 0x8c, 0x66, 0x2a, 0x53, 0x8d, 0xcb, 0x29,
	0xfd, 0x1e, 0x86, 0x0e, 0xd8, 0x26, 0x01, 0x74, 0x09, 0x47, 0x98, 0xe8, 0xf7, 0x2a, 0xd3, 0x19,
	0x0c, 0x51, 0xdc, 0x04, 0x60, 0x4b, 0x15, 0x42, 0xe4, 0x43, 0xe8, 0xff, 0x24, 0x6a, 0xc5, 0x0b,
	0x8c, 0x0e, 0x29, 0xfa, 0x3b, 0x8c, 0x36, 0x17, 0x6d, 0x55, 0xab, 0x31, 0x0c, 0x9c, 0x05, 0x2c,
	0xd6, 0x81, 0x51, 0x41, 0x90, 0x79, 0x2e, 0xfd, 0x27, 0xf2, 0xdd, 0xd4, 0xf5, 0x38, 0x7a, 0x97,
	0xc7, 0x71, 0xe8, 0x31, 0xf9, 0x18, 0xf6, 0xa7, 0x79, 0xce, 0x2b, 0x55, 0xca, 0xda, 0x04, 0xb3,
	0xc3, 0x36, 0x00, 0xf9, 0x04, 0xe0, 0x32, 0x7b, 0xed, 0x9a, 0x67, 0xc7, 0xb0, 0x03, 0x84, 0x7c,
	0x06, 0x87, 0x69, 0x23, 0x25, 0x2f, 0x94, 0x93, 0xd9, 0x35, 0x32, 0x1d, 0x94, 0x3c, 0x84, 0xd1,
	0xec, 0x45, 0xa3, 0x16, 0xe5, 0xab, 0x22, 0x2d, 0x9b, 0x42, 0x25, 0x7d, 0x23, 0xd6, 0x06, 0xe9,
	0x1b, 0x38, 0x99, 0x35, 0xf3, 0x3a, 0x97, 0xa2, 0x52, 0xa2, 0x2c, 0x7c, 0xad, 0x82, 0xb1, 0x89,
	0x6e, 0x8e, 0x8d, 0xab, 0x62, 0xdc, 0xa9, 0xe2, 0x3b, 0x46, 0x8a, 0x9c, 0xc0, 0xee, 0xb3, 0xb2,
	0x12, 0x39, 0x76, 0x9f, 0x25, 0xe8, 0x1b, 0x20, 0x9d, 0xfb, 0xb7, 0x2a, 0xe1, 0x57, 0x30, 0x6a,
	0x99, 0xc1, 0x3a, 0xde, 0xb7, 0x75, 0x0c, 0x38, 0xac, 0x2d, 0x47, 0xff, 0x8a, 0xe0, 0x20, 0x44,
	0x5a, 0x21, 0x44, 0xb7, 0x85, 0x10, 0x07, 0x21, 0x98, 0x72, 0x2a, 0x25, 0xc5, 0xbc, 0x51, 0x6e,
	0xf2, 0x36, 0x00, 0x39, 0x86, 0xde, 0xd3, 0xd2, 0xd6, 0x68, 0x97, 0xe9, 0xa3, 0x6e, 0x0b, 0xc6,
	0x55, 0x26, 0x0a, 0x53, 0x91, 0x01, 0x43, 0x8a, 0xfe, 0x1b, 0xe9, 0x91, 0x31, 0xc3, 0x7c, 0x77,
	0x9b, 0x8d, 0x3c, 0x02, 0x48, 0xcb, 0x62, 0x21, 0x6c, 0x9a, 0x76, 0x4c, 0x9a, 0x1e, 0x62, 0xbb,
	0xb7, 0xee, 0x9e, 0x6c, 0xc4, 0x1e, 0x17, 0x4a, 0xae, 0x59, 0xa0, 0x77, 0xfa, 0x1d, 0x1c, 0x75,
	0xd8, 0x3a, 0xd0, 0x2b, 0xee, 0xbc, 0xd4, 0x47, 0x9d, 0xae, 0x97, 0xd9, 0xaa, 0xe1, 0xb8, 0xae,
	0x2c, 0xf1, 0x4d, 0xfc, 0x75, 0x64, 0x67, 0xd6, 0xdd, 0xb6, 0xfd, 0xcc, 0x5a, 0x0b, 0x9d, 0x99,
	0x35, 0x20, 0xf3, 0x5c, 0xfa, 0x5f, 0xac, 0xf3, 0xe4, 0x77, 0xe4, 0xad, 0xc5, 0x7d, 0x9f, 0x1d,
	0x3b, 0x01, 0x82, 0xee, 0x5c, 0x66, 0xaf, 0x9f, 0x14, 0xcf, 0x57, 0x62, 0xf9, 0x42, 0xe1, 0x08,
	0xbf, 0x85, 0x43, 0xc6, 0x70, 0x84, 0xa8, 0x17, 0xb6, 0x03, 0xdd, 0x85, 0xf5, 0x54, 0x7b, 0xe8,
	0x69, 0xc3, 0x1b, 0xee, 0xa6, 0xba, 0x8d, 0x06, 0x72, 0x8f, 0x64, 0x59, 0x55, 0x7c, 0x81, 0x63,
	0xdd, 0x41, 0xf5, 0x76, 0x9a, 0xbe, 0xca, 0x84, 0x12, 0xc5, 0x92, 0xf1, 0x55, 0xb2, 0x67, 0x84,
	0x42, 0x48, 0xc7, 0xeb, 0xc8, 0xb4, 0xbc, 0xae, 0x92, 0x81, 0x11, 0x69, 0x61, 0xa1, 0x95, 0x69,
	0x7e, 0x95, 0xec, 0xb7, 0xad, 0x4c, 0xf3, 0x2b, 0xdd, 0xfc, 0xa9, 0xe4, 0x99, 0xe2, 0x8b, 0xa9,
	0x4a, 0xc0, 0x36, 0xbf, 0x07, 0x68, 0x06, 0x23, 0x33, 0x23, 0x77, 0xb7, 0x56, 0xe8, 0x1c, 0x86,
	0xee, 0x8a, 0xad, 0x1a, 0x89, 0x42, 0xdf, 0xea, 0x63, 0x1b, 0x81, 0x51, 0x30, 0x10, 0x43, 0x0e,
	0xfd, 0x16, 0xe7, 0x7e, 0xb3, 0x00, 0xa2, 0x5b, 0x17, 0x40, 0xdc, 0x59, 0x00, 0xf4, 0x07, 0x20,
	0x37, 0xaf, 0x37, 0x89, 0x68, 0xf2, 0x9c, 0xd7, 0xb5, 0xb1, 0x35, 0x60, 0x8e, 0xb4, 0xeb, 0x21,
	0xab, 0x4b, 0xff, 0x6a, 0x58, 0xea, 0xfc, 0xef, 0x1e, 0xf4, 0xa6, 0x95, 0x20, 0x17, 0xfe, 0x63,
	0x44, 0x3e, 0x30, 0xbe, 0xb6, 0x3f, 0x52, 0xa7, 0xf7, 0xdb, 0x60, 0xb5, 0x5a, 0xd3, 0x7b, 0xe4,
	0x0b, 0xe8, 0xdb, 0xd7, 0x9c, 0x10, 0x3b, 0x26, 0xe1, 0x5b, 0x7f, 0x7a, 0xdc, 0xc2, 0xac, 0xc6,
	0x97, 0x9b, 0x47, 0x91, 0x9c, 0x84, 0xcf, 0xa1, 0xd7, 0x22, 0x1d, 0xd4, 0xea, 0x3d, 0xee, 0x6c,
	0x62, 0xf2, 0xd1, 0x8d, 0x1d, 0xec, 0x2d, 0x3c, 0x78, 0x1b, 0xcb, 0x9a, 0xb9, 0xf0, 0xff, 0x27,
	0x8c, 0xb2, 0xfd, 0xe5, 0xc3, 0x28, 0xc3, 0x3f, 0x9a, 0xf3, 0xd9, 0x8e, 0xbd, 0xf7, 0xb9, 0xb5,
	0xd3, 0xbc, 0xcf, 0xc1, 0xee, 0xb1, 0xd9, 0xb1, 0x95, 0xc6, 0xec, 0xb4, 0x7a, 0x16, 0xb3, 0x13,
	0x34, 0x19, 0xbd, 0x37, 0xef, 0x9b, 0xbf, 0xec, 0xc5, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3a,
	0xad, 0x06, 0x77, 0xd8, 0x0a, 0x00, 0x00,
}
